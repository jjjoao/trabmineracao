import streamlit as st
import pandas as pd
import pickle
import seaborn as sns
import matplotlib.pyplot as plt
import requests
import os

# --- CONFIGURA√á√ïES DA P√ÅGINA E FUN√á√ïES DE DOWNLOAD ---

st.set_page_config(
    page_title="Data App - Sa√∫de Mental",
    page_icon="üß†",
    layout="wide"
)

def download_file_from_google_drive(id, destination):
    """Fun√ß√£o robusta para baixar arquivos do Google Drive, lidando com avisos."""
    URL = "https://docs.google.com/uc?export=download"
    session = requests.Session()
    response = session.get(URL, params={'id': id}, stream=True)
    token = None
    for key, value in response.cookies.items():
        if key.startswith('download_warning'):
            token = value
            break
    if token:
        params = {'id': id, 'confirm': token}
        response = session.get(URL, params=params, stream=True)
    
    with open(destination, "wb") as f:
        for chunk in response.iter_content(32768):
            if chunk:
                f.write(chunk)

# --- CARREGAMENTO DO MODELO ---
MODEL_PATH = 'modelo_final (3).pkl'

@st.cache_resource
def load_model(model_path):
    """Carrega o modelo a partir de um arquivo local."""
    try:
        with open(model_path, 'rb') as file:
            model = pickle.load(file)
        return model
    except FileNotFoundError:
        st.error(f"Arquivo do modelo '{model_path}' n√£o encontrado. Certifique-se de que o nome est√° correto e que ele foi enviado para o reposit√≥rio do GitHub.")
        return None
    except Exception as e:
        st.error(f"Ocorreu um erro ao carregar o modelo: {e}")
        return None

model = load_model(MODEL_PATH)

# --- CARREGAMENTO DO DATASET PARA O DASHBOARD ---
DATASET_ID = '1ASanAI-8GIXbBsek87_WiaHQCM5FMRxA'
DATASET_PATH = 'mental_health.csv'

@st.cache_data
def load_data(file_id, dataset_path):
    """Baixa e carrega o dataset para o dashboard."""
    if not os.path.exists(dataset_path):
        st.info("Dataset n√£o encontrado. Baixando do Google Drive...")
        with st.spinner("Baixando dataset..."):
            download_file_from_google_drive(file_id, dataset_path)
            st.success("Download do dataset conclu√≠do!")
    try:
        return pd.read_csv(dataset_path)
    except Exception as e:
        st.error(f"Ocorreu um erro ao carregar o dataset: {e}")
        return None

# --- NAVEGA√á√ÉO E P√ÅGINAS ---
opcoes = ['Boas-vindas', 'Dashboard Interativo', 'Previs√£o de Interesse no Trabalho']
pagina = st.sidebar.selectbox('Navegue pelo menu:', opcoes)

# --- P√ÅGINA 1: BOAS-VINDAS ---
if pagina == 'Boas-vindas':
    st.title('**Data App de An√°lise de Sa√∫de Mental üß†**')
    st.header('Descri√ß√£o do Projeto e Metodologia')

    # Texto atualizado conforme solicitado
    st.markdown("""
        Este conjunto de dados parece conter uma variedade de recursos relacionados √† an√°lise de texto, an√°lise de sentimentos e indicadores psicol√≥gicos, provavelmente derivados de postagens ou dados de texto. Alguns recursos incluem √≠ndices de legibilidade, como o √çndice de Legibilidade Automatizado (ARI), o √çndice de Coleman Liau e o N√≠vel de Ensino Flesch-Kincaid, bem como pontua√ß√µes de an√°lise de sentimentos, como sentimentos compostos, negativos, neutros e positivos. Al√©m disso, h√° recursos relacionados a aspectos psicol√≥gicos, como estresse econ√¥mico, isolamento, uso de subst√¢ncias e estresse dom√©stico. O conjunto de dados parece abranger uma ampla gama de atributos lingu√≠sticos, psicol√≥gicos e comportamentais, potencialmente adequados para analisar t√≥picos relacionados √† sa√∫de mental em comunidades online ou dados de texto.

        O conjunto de dados fornece insights valiosos sobre sa√∫de mental, analisando padr√µes lingu√≠sticos, sentimentos e indicadores psicol√≥gicos em dados de texto. Pesquisadores e cientistas de dados podem obter uma melhor compreens√£o de como os problemas de sa√∫de mental se manifestam na comunica√ß√£o online.

        Com uma ampla gama de recursos, incluindo pontua√ß√µes de an√°lise de sentimentos e indicadores psicol√≥gicos, o conjunto de dados oferece oportunidades para o desenvolvimento de modelos preditivos para identificar ou prever resultados de sa√∫de mental com base em dados textuais.
    """)
    st.markdown("---")
    st.subheader("Constru√ß√£o do Modelo")
    st.markdown("""
        O modelo utilizado √© uma combina√ß√£o de dois modelos: um **Extreme Gradient Boosting** e um **Random Forest**.
        
        Inicialmente, foram removidos os indiv√≠duos que responderam "Maybe" para a vari√°vel de interesse `Work_Interest` para facilitar a constru√ß√£o do modelo, j√° que esses n√£o eram de interesse para o estudo. Foi realizado um pr√©-processamento dos dados, transformando todas as vari√°veis categ√≥ricas com *n* categorias em *n-1* vari√°veis, e uma separa√ß√£o dos dados entre treino e teste, sendo 70% para treino e 30% para teste. Al√©m disso, foram feitos 10 folds de valida√ß√£o cruzada com o conjunto de treino.
        
        Assim, foram comparados 15 modelos de machine learning atrav√©s das m√©tricas Acur√°cia, AUC, Recall, Precis√£o, F1-Score, Kappa e MCC. Os modelos de Random Forest e Extreme Gradient Boosting tiveram as melhores performances entre todos os outros em todas as m√©tricas.
        
        Dessa forma, foi utilizado o comando `tune_model`, que realizou 10 folds de valida√ß√£o cruzada para selecionar os melhores hiperpar√¢metros que maximizem o F1-score dos modelos. Finalmente, foi feita uma combina√ß√£o (ensemble) dos modelos otimizados, fazendo uma m√©dia das probabilidades preditas para determinar quais indiv√≠duos t√™m interesse no trabalho e quais n√£o t√™m.
        
        O modelo final foi testado nos 30% dos dados separados para teste, e as m√©tricas para a classifica√ß√£o do modelo foram:
    """)
    
    # Tabela de m√©tricas
    metrics_data = {
        'M√©trica': ['Accuracy', 'AUC', 'Recall', 'Prec.', 'F1', 'Kappa', 'MCC'],
        'Valor': [0.9995, 1.0000, 0.9988, 1.0000, 0.9994, 0.9989, 0.9989]
    }
    metrics_df = pd.DataFrame(metrics_data)
    st.table(metrics_df)


# --- P√ÅGINA 2: DASHBOARD INTERATIVO ---
elif pagina == 'Dashboard Interativo':
    st.header('Dashboard de An√°lise do Dataset')
    dados = load_data(DATASET_ID, DATASET_PATH)
    if dados is not None:
        st.write("Vis√£o geral dos dados brutos:")
        st.dataframe(dados.head())
        st.markdown('---')
        st.subheader("Filtros e M√©tricas")
        col1, col2, col3 = st.columns(3)
        genero = col1.selectbox("G√™nero", dados['Gender'].unique())
        hist_familiar = col2.selectbox("Hist√≥rico Familiar", dados['family_history'].unique())
        ocupacao = col3.selectbox("Ocupa√ß√£o", dados['Occupation'].unique())
        filtro = (dados['Gender'] == genero) & (dados['family_history'] == hist_familiar) & (dados['Occupation'] == ocupacao)
        dados_filtrados = dados[filtro]
        if dados_filtrados.empty:
            st.warning("Nenhum dado encontrado para a combina√ß√£o de filtros selecionada.")
        else:
            col1, col2 = st.columns([1, 2])
            with col1:
                st.metric('Indiv√≠duos na Sele√ß√£o', dados_filtrados.shape[0])
                mood_mode = dados_filtrados['Mood_Swings'].mode()[0]
                st.metric('Humor Mais Comum', mood_mode)
                st.metric('Procuraram Tratamento', '{:.2%}'.format(dados_filtrados['treatment'].value_counts(normalize=True).get('Yes', 0)))
            with col2:
                fig, ax = plt.subplots()
                sns.countplot(data=dados_filtrados, x='Work_Interest', ax=ax, palette='viridis')
                ax.set_title('Distribui√ß√£o de Interesse no Trabalho (Filtrado)')
                ax.set_xlabel('Interesse no Trabalho')
                ax.set_ylabel('Contagem')
                st.pyplot(fig)

# --- P√ÅGINA 3: PREVIS√ÉO DE INTERESSE NO TRABALHO ---
elif pagina == 'Previs√£o de Interesse no Trabalho':
    st.header('Modelo Preditivo: Interesse no Trabalho')
    st.markdown("Preencha os campos abaixo com as informa√ß√µes do perfil a ser analisado. O modelo ir√° prever se o interesse no trabalho ser√° **'Sim'** ou **'N√£o'**.")
    st.markdown('---')

    # CORRE√á√ÉO FINAL: Replicando o pr√©-processamento do notebook EXATAMENTE.
    def preprocess_input(user_data, expected_cols):
        df = pd.DataFrame(user_data, index=[0])

        # Gender
        dummiesg = pd.get_dummies(df['Gender'], drop_first=True)
        df = pd.concat([df, dummiesg], axis=1)

        # Country
        dummiesc = pd.get_dummies(df['Country'], drop_first=True)
        df = pd.concat([df, dummiesc], axis=1)

        # Occupation
        dummieso = pd.get_dummies(df['Occupation'], drop_first=True)
        df = pd.concat([df, dummieso], axis=1)
        df = df.rename(columns={'Corporate': 'occupationCorporate', 'Housewife': 'occupationHousewife', 'Others': 'occupationOthers', 'Student': 'occupationStudent'})

        # self_employed
        dummiesse = pd.get_dummies(df['self_employed'], drop_first=True)
        df = pd.concat([df, dummiesse], axis=1)
        df = df.rename(columns={'Yes': 'SelfEmployed'})

        # family_history
        dummiesfh = pd.get_dummies(df['family_history'], drop_first=True)
        df = pd.concat([df, dummiesfh], axis=1)
        df = df.rename(columns={'Yes': 'FamilyHistory'})

        # treatment
        dummiest = pd.get_dummies(df['treatment'], drop_first=True)
        df = pd.concat([df, dummiest], axis=1)
        df = df.rename(columns={'Yes': 'Treatment'})

        # Days_Indoors
        dummiesdi = pd.get_dummies(df['Days_Indoors'], drop_first=True)
        df = pd.concat([df, dummiesdi], axis=1)
        df = df.rename(columns={'15-30 days': 'Days_Indoors15-30', '31-60 days': 'Days_Indoors31-60', 'Go out Every day': 'Days_IndoorsGo out Every day', 'More than 2 months': 'Days_Indoors60+'})

        # Growing_Stress
        dummiesgs = pd.get_dummies(df['Growing_Stress'], drop_first=True)
        df = pd.concat([df, dummiesgs], axis=1)
        df = df.rename(columns={'No': 'Growing_Stress No', 'Yes': 'Growing_Stress Yes'})

        # Changes_Habits
        dummiesch = pd.get_dummies(df['Changes_Habits'], drop_first=True)
        df = pd.concat([df, dummiesch], axis=1)
        df = df.rename(columns={'No': 'Changes_Habits No', 'Yes': 'Changes_Habits Yes'})

        # Mental_Health_History
        dummiesmhh = pd.get_dummies(df['Mental_Health_History'], drop_first=True)
        df = pd.concat([df, dummiesmhh], axis=1)
        df = df.rename(columns={'No': 'Mental_Health_History No', 'Yes': 'Mental_Health_History Yes'})

        # Mood_Swings
        dummiesms = pd.get_dummies(df['Mood_Swings'], drop_first=True)
        df = pd.concat([df, dummiesms], axis=1)
        df = df.rename(columns={'Low': 'Mood_Swings Low', 'Medium': 'Mood_Swings Medium'})

        # Coping_Struggles
        dummiescs = pd.get_dummies(df['Coping_Struggles'], drop_first=True)
        df = pd.concat([df, dummiescs], axis=1)
        df = df.rename(columns={'Yes': 'CopingStruggles'})

        # Social_Weakness
        dummiessw = pd.get_dummies(df['Social_Weakness'], drop_first=True)
        df = pd.concat([df, dummiessw], axis=1)
        df = df.rename(columns={'No': 'Social_Weakness No', 'Yes': 'Social_Weakness Yes'})

        # mental_health_interview
        dummiesmhi = pd.get_dummies(df['mental_health_interview'], drop_first=True)
        df = pd.concat([df, dummiesmhi], axis=1)
        df = df.rename(columns={'No': 'mental_health_interview No', 'Yes': 'mental_health_interview Yes'})

        # care_options
        dummiesco = pd.get_dummies(df['care_options'], drop_first=True)
        df = pd.concat([df, dummiesco], axis=1)
        df = df.rename(columns={'Not sure': 'care_options Not sure', 'Yes': 'care_options Yes'})
        
        # Alinhamento final para garantir que todas as colunas esperadas existam
        for col in expected_cols:
            if col not in df.columns:
                df[col] = 0
        
        return df[expected_cols]

    # --- Coleta de Dados do Usu√°rio ---
    st.sidebar.header("Dados para Previs√£o")

    user_inputs = {}
    # Removido 'age' pois n√£o est√° na lista de features do modelo
    user_inputs['Gender'] = st.sidebar.selectbox("G√™nero", ['Female', 'Male'])
    user_inputs['Country'] = st.sidebar.selectbox("Pa√≠s", ['United States', 'Canada', 'Australia', 'Belgium', 'Bosnia and Herzegovina', 'Brazil', 'Colombia', 'Costa Rica', 'Croatia', 'Czech Republic', 'Denmark', 'Finland', 'France', 'Georgia', 'Germany', 'Greece', 'India', 'Ireland', 'Israel', 'Italy', 'Mexico', 'Moldova', 'Netherlands', 'New Zealand', 'Nigeria', 'Philippines', 'Poland', 'Portugal', 'Russia', 'Singapore', 'South Africa', 'Sweden', 'Switzerland', 'Thailand', 'United Kingdom'])
    user_inputs['Occupation'] = st.sidebar.selectbox("Ocupa√ß√£o", ['Student', 'Corporate', 'Business', 'Housewife', 'Others'])
    user_inputs['self_employed'] = st.sidebar.radio("√â aut√¥nomo?", ['No', 'Yes'])
    user_inputs['family_history'] = st.sidebar.radio("Possui hist√≥rico familiar de doen√ßa mental?", ['No', 'Yes'])
    user_inputs['treatment'] = st.sidebar.radio("J√° procurou tratamento?", ['No', 'Yes'])
    user_inputs['Days_Indoors'] = st.sidebar.selectbox("Frequ√™ncia que fica em ambientes fechados", ['Go out Every day', '1-14 days', '15-30 days', '31-60 days', 'More than 2 months', '0-1 days'])
    user_inputs['Growing_Stress'] = st.sidebar.selectbox("N√≠vel de estresse aumentando?", ['Yes', 'No', 'Maybe'])
    user_inputs['Changes_Habits'] = st.sidebar.selectbox("Houve mudan√ßas de h√°bitos?", ['Yes', 'No', 'Maybe'])
    user_inputs['Mental_Health_History'] = st.sidebar.selectbox("Possui hist√≥rico de sa√∫de mental?", ['No', 'Yes', 'Maybe'])
    user_inputs['Mood_Swings'] = st.sidebar.selectbox("N√≠vel de mudan√ßa de humor", ['Low', 'Medium', 'High'])
    user_inputs['Coping_Struggles'] = st.sidebar.radio("Dificuldade em lidar com problemas?", ['No', 'Yes'])
    user_inputs['Social_Weakness'] = st.sidebar.selectbox("Sente-se socialmente fraco?", ['No', 'Yes', 'Maybe'])
    user_inputs['mental_health_interview'] = st.sidebar.selectbox("Faria entrevista sobre sa√∫de mental?", ['No', 'Yes', 'Maybe'])
    user_inputs['care_options'] = st.sidebar.selectbox("Conhece op√ß√µes de cuidado?", ['No', 'Yes', 'Not sure'])

    if st.button('**APLICAR O MODELO**'):
        if model:
            # A lista exata de colunas que o seu modelo espera, na ordem correta.
            expected_cols = ['Male', 'Belgium', 'Bosnia and Herzegovina', 'Brazil', 'Canada', 'Colombia', 'Costa Rica', 'Croatia', 'Czech Republic', 'Denmark', 'Finland', 'France', 'Georgia', 'Germany', 'Greece', 'India', 'Ireland', 'Israel', 'Italy', 'Mexico', 'Moldova', 'Netherlands', 'New Zealand', 'Nigeria', 'Philippines', 'Poland', 'Portugal', 'Russia', 'Singapore', 'South Africa', 'Sweden', 'Switzerland', 'Thailand', 'United Kingdom', 'United States', 'occupationCorporate', 'occupationHousewife', 'occupationOthers', 'occupationStudent', 'SelfEmployed', 'FamilyHistory', 'Treatment', 'Days_Indoors15-30', 'Days_Indoors31-60', 'Days_IndoorsGo out Every day', 'Days_Indoors60+', 'Growing_Stress No', 'Growing_Stress Yes', 'Changes_Habits No', 'Changes_Habits Yes', 'Mental_Health_History No', 'Mental_Health_History Yes', 'Mood_Swings Low', 'Mood_Swings Medium', 'CopingStruggles', 'Social_Weakness No', 'Social_Weakness Yes', 'mental_health_interview No', 'mental_health_interview Yes', 'care_options Not sure', 'care_options Yes']
            
            # Pr√©-processa os dados do usu√°rio antes de enviar para o modelo
            input_df_processed = preprocess_input(user_inputs, expected_cols)
            
            # O modelo agora recebe os dados j√° no formato que ele espera
            prediction = model.predict(input_df_processed)
            prediction_proba = model.predict_proba(input_df_processed)
            
            st.subheader("Resultado da Predi√ß√£o")
            
            resultado = prediction['prediction_label'][0]
            probabilidade = prediction['prediction_score'][0]
            
            st.markdown(f"## O interesse no trabalho previsto √©: **{str(resultado).upper()}**")
            st.markdown(f"### Probabilidade da predi√ß√£o: **{probabilidade:.2%}**")
        else:
            st.error("O modelo n√£o est√° carregado. N√£o √© poss√≠vel fazer a predi√ß√£o.")
